forecast::stlf(ts_data, h = 30) |>
autoplot()
pred_stl_ets
df_basis <- df |>
left_join(pred_stl_ets)
df_basis
df_basis |> tail()
df_basis <- df |>
join(pred_stl_ets)
pred_stl_ets
df_basis <- df |>
right_join(pred_stl_ets)
df_basis
pred_stl_ets <- forecast::stlf(
ts_data,
h = 30) |>
as_tibble() |>
select(PRED = "Point Forecast") |>
mutate(
date = seq(
end,
by = "day",
length.out = 30)
) |>
mutate(symbol = code,
ajusted = df$adjusted)
code = "AAPL"
pred_stl_ets <- forecast::stlf(
ts_data,
h = 30) |>
as_tibble() |>
select(PRED = "Point Forecast") |>
mutate(
date = seq(
end,
by = "day",
length.out = 30)
) |>
mutate(symbol = code)
df_basis <- df |>
right_join(pred_stl_ets)
df_basis
df_basis <- df |>
left_join(pred_stl_ets)
df_basis
df_basis |> tail()
df
pred_stl_ets <- forecast::stlf(
ts_data,
h = 30) |>
as_tibble() |>
select(adjusted = "Point Forecast") |>
mutate(
date = seq(
end,
by = "day",
length.out = 30)
) |>
mutate(symbol = code)
df_basis <- df |>
left_join(pred_stl_ets)
df_basis
df_basis |> tail()
df_basis <- df |>
left_join(pred_stl_ets) |>
mutate(type = ifelse(date >= end, "Forecast", "Real"))
df_basis
df_basis |> tail()
trend_plot <- forecast::mstl(ts_data) |> autoplot()
forecast_plot <- forecast::stlf(ts_data, h = 30) |>
autoplot()
res <- list(pred_df = df_basis,
trend_plot = trend_plot,
forecast_plot = forecast_plot)
res
compute_gains(df_basis)
compute_gains()
df_basis |>
filter(type == "Forecast") |>
compute_gains()
df_basis |>
filter(type == "Forecast")
df_basis
df_basis |> tail()
pred_stl_ets
df_basis <- df |>
bind_rows(pred_stl_ets) |>
mutate(type = ifelse(date >= end, "Forecast", "Real"))
df_basis
df_basis |> tail()
df_basis <- df |>
bind_rows(pred_stl_ets) |>
mutate(type = ifelse(date >= end, "Forecast", "Real")) |>
arrange(date)
df_basis |>
filter(type == "Forecast") |>
compute_gains()
investment_df
codes <- investment_df |> pull(symbol) |> unique()
forecast_stock(df, code = code)
forecast_stock <- function(df,
start = min(df$date),
end = max(df$date),
code){
df <- df |>
filter(date <= end, date >= start, symbol == code)
# Monthly Seasonality
ts_data <- ts(df$adjusted, frequency = 30)
# Decompose the time series
decomp <- forecast::mstl(ts_data) |>
as_tibble() |>
mutate(date = seq(min(df$date), by = "day", length.out = nrow(df)))
trend_plot <- forecast::mstl(ts_data) |> autoplot()
pred_stl_ets <- forecast::stlf(
ts_data,
h = 30) |>
as_tibble() |>
select(adjusted = "Point Forecast") |>
mutate(
date = seq(
end,
by = "day",
length.out = 30)
) |>
mutate(symbol = code)
df_basis <- df |>
bind_rows(pred_stl_ets) |>
mutate(type = ifelse(date >= end, "Forecast", "Real")) |>
arrange(date)
forecast_plot <- forecast::stlf(ts_data, h = 30) |>
autoplot()
gains_forecast <- df_basis |>
filter(type == "Forecast") |>
compute_gains()
res <- list(pred_df = df_basis,
gains_forecast = gains_forecast,
trend_plot = trend_plot,
forecast_plot = forecast_plot)
return(res)
}
codes <- investment_df |> pull(symbol) |> unique()
names(results) <- codes
results <- c()
names(results) <- codes
results <- list()
names(results) <- codes
names(results)
codes
results <- list()
for (code in codes){
res <- forecast_stock(df, code = code)
results$code <- res
}
df
results <- list()
for (code in codes){
res <- forecast_stock(df |> filter(symbol == code), code = code)
results$code <- res
}
df |> filter(symbol == code)
code
get_yahoo_data <- function(code, start = lubridate::date("2023-10-01"), end = lubridate::today()){
if(length(code) >= 1){
df <- tq_get(
code,
get = "stock.prices",
from = start,
to = end,
complete_cases = TRUE) |>
select(symbol, date, adjusted)
} else{
cli::cli_alert_danger("Please provide a valid Stock Code. Check Yahoo Finance for them")
}
return(df)
}
df <- get_yahoo_data(code = c("AAPL", "AMZN"))
codes <- investment_df |> pull(symbol) |> unique()
results <- list()
for (code in codes){
res <- forecast_stock(df |> filter(symbol == code), code = code)
results$code <- res
}
results
results |> NAMES()
results |> names()
results <- list()
results <- list()
for (code in codes){
res <- forecast_stock(df |> filter(symbol == code), code = code)
results[[code]] <- res
}
results
results |> names()
res
res |> pull(gains_forecast)
res$gains_forecast
res$gains_forecast |>
left_join(investment_df) |>
mutate(return = investment + investment * percentage_change / 100)
res$gains_forecast
res$pred_df
res$gains_forecast |>
filter(type == "Forecast") |>
left_join(investment_df) |>
mutate(return = investment + investment * percentage_change / 100)
res$gains_forecast
res$pred_df |>
filter(type == "Forecast")
res$pred_df |>
filter(type == "Forecast") |>
compute_gains()
res$pred_df |>
filter(type == "Forecast") |>
compute_gains() |>
left_join(investment_df)
res$pred_df |>
filter(type == "Forecast") |>
compute_gains() |>
left_join(investment_df) |>
mutate(return = investment + investment * percentage_change / 100)
res$pred_df |>
filter(type == "Forecast")
res$pred_df |>
slice(-30)
res$pred_df |>
filter(date >= lubridate::today())
res$pred_df |>
filter(date >= lubridate::today() - lubridate::days(1))
res$pred_df |>
filter(date >= lubridate::today() - lubridate::days(3))
res$pred_df |>
filter(date >= lubridate::today() - lubridate::days(2))
res$pred_df |>
filter(date >= lubridate::today() - lubridate::days(2)) |>
compute_gains()
res$pred_df |>
filter(date >= lubridate::today() - lubridate::days(2)) |>
compute_gains() |>
left_join(investment_df)
res$pred_df |>
filter(date >= lubridate::today() - lubridate::days(2)) |>
compute_gains() |>
left_join(investment_df) |>
mutate(return = investment + investment * percentage_change / 100)
length(results)
results[[1]]
results[[1]]$pred_df
df_ls <- c()
for (i in 1:length(results)){
df_ls <- c(results[[i]]$pred_df, df_ls)
}
bind_rows(df_ls)
df_ls
results[[i]]$pred_df
df_ls <- list()
for (i in 1:length(results)){
df_ls[i] <- results[[i]]$pred_df
}
df_ls
results[[i]]
results[[i]]$pred_df
df_c <- data.frame()
df_c <- data.frame()
for (i in 1:length(results)){
df_c <- bind_rows(df_c, results[[i]]$pred_df)
}
df_c
df_c <- tibble()
for (i in 1:length(results)){
df_c <- bind_rows(df_c, results[[i]]$pred_df)
}
df_c
df_c |>
ggplot(aes(x = date, y = adjusted, line = type, col = symbol)) +
geom_line()
?aes
df_c |>
ggplot(aes(x = date, y = adjusted, linetype = type, col = symbol)) +
geom_line()
df_c |>
ggplot(aes(x = date, y = adjusted, linetype = type, col = symbol)) +
geom_line() +
scale_linetype_manual(values=c("solid", "dashed")) +
return(results)
df_c |>
ggplot(aes(x = date, y = adjusted, linetype = type, col = symbol)) +
geom_line() +
scale_linetype_manual(values=c("solid", "dashed"))
df_c |>
ggplot(aes(x = date, y = adjusted, linetype = type, col = symbol)) +
geom_line() +
scale_linetype_manual(values=c("dashed", "solid"))
df_c |>
ggplot(aes(x = date, y = adjusted, linetype = type, col = symbol)) +
geom_line() +
scale_linetype_manual(values=c("dashed", "solid")) +
ggtitle("Forecast Portfolio Chart")+
scale_x_date(date_breaks = "1 month") +
theme_tq()
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
library(devtools)
use_mit_license()
document()
check()
check()
document()
check()
library(richme)
library(richme)
dt <- get_yahoo_data("LOGN.SW", start = lubridate::date("2019-01-05"))
library(richme)
dt <- get_yahoo_data("LOGN.SW", start = lubridate::date("2019-01-05"))
library(richme)
dt <- get_yahoo_data("LOGN.SW", start = lubridate::date("2019-01-05"))
library(richme)
library(richme)
dt <- get_yahoo_data("LOGN.SW", start = lubridate::date("2019-01-05"))
lubridate::today() - lubridate::years(4)
document()
library(richme)
library(richme)
dt <- get_yahoo_data("LOGN.SW", start = lubridate::date("2019-01-05"))
plot_stock_lines(dt)
library(richme)
library(richme)
dt <- get_yahoo_data("LOGN.SW", start = lubridate::date("2019-01-05"))
plot_stock_lines(dt)
forecast_stock(dt)
forecast_stock(dt, code = "LOGN.SW")
dt
document()
library(richme)
dt <- get_yahoo_data("LOGN.SW", start = lubridate::date("2019-01-05"))
plot_stock_lines(dt)
forecast_stock(dt)
library(richme)
library(richme)
dt <- get_yahoo_data("LOGN.SW", start = lubridate::date("2019-01-05"))
plot_stock_lines(dt)
forecast_stock(dt)
investment_dt = tibble(symbol = "LOGN.SW", investment = 100)
simulate_portfolio_past(dt, investment_dt)
simulate_portfolio_future(dt, investment_dt)
sim <- simulate_portfolio_future(dt, investment_dt)
sim$portfolio_plot
sim <- simulate_portfolio_future(dt |> filter(date > "2022-01-05"), investment_dt)
sim$portfolio_plot
use_readme_rmd()
dt <- get_yahoo_data("AAPL", start = "2023-10-05")
dt_m <- get_yahoo_data("LOGN.SW", start = "2023-10-05")
dt |> head()
dt |> head()
dt_m |> head()
dt |> plot_stock_lines()
dt_m |> plot_stock_lines()
dt_m
dt_m |> tail()
dt_m <- get_yahoo_data(code = c("LOGN.SW", "RACE"), start = "2023-10-05")
dt_m
dt_m |> tail()
dt_m |> plot_stock_lines()
dt |> compute_gains()
dt_m |> compute_gains()
dt_port <- get_yahoo_data(code = c('RACE', 'AAPL', 'LOGN.SW'))
inves_df <- tibble(
symbol = c(  'RACE', 'AAPL', 'LOGN.SW'),
investment = c(1000,   2000,     1500))
dt_port |>
simulate_portfolio_past(
investment_df = inves_df,
start = "2023-01-01",
end = "2023-12-31")
dt_port |>
simulate_portfolio_past(
investment_df = inves_df,
start = "2023-01-01",
end = "2023-12-31") |>
pull(return) |>
sum()
p1 <- dt_port |>
simulate_portfolio_past(
investment_df = inves_df,
start = "2023-01-01",
end = "2023-12-31") |>
```
p1 <- dt_port |>
simulate_portfolio_past(
investment_df = inves_df,
start = "2023-01-01",
end = "2023-12-31")
return = p1 |> pull(return) |> sum()
investment = p1 |> pull(investment) |> sum()
cli::cli_alert_info(paste(return - investment))
return = p1 |> pull(return) |> sum() |> round(2)
investment = p1 |> pull(investment) |> sum() |> round(2)
cli::cli_alert_info(paste(return - investment))
cli::cli_alert_info(paste(return - investment, "of gains with portfolio 1"))
1750*2+2000
1750+750+2000
inves_df <- tibble(
symbol = c(  'RACE', 'AAPL', 'LOGN.SW'),
investment = c(1750,   750,     2000))
p2 <- dt_port |>
simulate_portfolio_past(
investment_df = inves_df,
start = "2023-01-01",
end = "2023-12-31")
return = p2 |> pull(return) |> sum() |> round(2)
investment = p2 |> pull(investment) |> sum() |> round(2)
cli::cli_alert_info(paste(return - investment, "of gains with portfolio 2"))
dt |> forecast_stock()
forecast_aapl |> names()
forecast_aapl <- dt |> forecast_stock()
forecast_aapl |> names()
forecast_aapl$gains_forecast
forecast_aapl$trend_plot
forecast_aapl$forecast_plot
inves_df <- tibble(
symbol = c(  'RACE', 'AAPL', 'LOGN.SW'),
investment = c(1000,   2000,     1500))
dt_port |>
simulate_portfolio_future(inves_df)
forecast_p1 <- dt_port |>
simulate_portfolio_future(inves_df)
forecast_p1$RACE$gains_forecast
library(richme)
forecast_p1 <- dt_port |>
simulate_portfolio_future(inves_df)
forecast_p1$gains
return = forecast_p1$gains |> pull(return) |> sum() |> round(2)
forecast_p1$gains
library(richme)
forecast_p1 <- dt_port |>
simulate_portfolio_future(inves_df)
forecast_p1 |> names()
return = forecast_p1$gains |> pull(return) |> sum() |> round(2)
investment = forecast_p1$gains |> pull(investment) |> sum() |> round(2)
cli::cli_alert_info(paste(return - investment, "of predicted gains with portfolio 1"))
forecast_p1$portfolio_plot
devtools::build_readme()
df
df <- get_yahoo_data('BTC')
library(richme)
df <- get_yahoo_data('BTC')
start = min(df$date)
end = max(df$date)
portfolio_df <- df |>
filter(date <= end, date >= start) |>
compute_gains(start = start, end = end) |>
left_join(investment_df) |>
mutate(return = investment + investment * percentage_change / 100)
investment_df <- tibble(symbol = "BTC", investment = 1000)
investment_df
portfolio_df <- df |>
filter(date <= end, date >= start) |>
compute_gains(start = start, end = end) |>
left_join(investment_df) |>
mutate(return = investment + investment * percentage_change / 100)
portfolio_df
codes <- investment_df |> pull(symbol) |> unique()
results <- list()
for (code in codes){
res <- forecast_stock(df |> filter(symbol == code), code = code)
res$gains_forecast <- res$pred_df |>
filter(date >= lubridate::today() - lubridate::days(2)) |>
compute_gains() |>
left_join(investment_df) |>
mutate(return = investment + investment * percentage_change / 100)
results[[code]] <- res
}
df_c <- tibble()
for (i in 1:length(results)){
df_c <- bind_rows(df_c, results[[i]]$pred_df)
}
portfolio_plot <- df_c |>
ggplot(aes(x = date, y = adjusted, linetype = type, col = symbol)) +
geom_line() +
scale_linetype_manual(values=c("dashed", "solid")) +
ggtitle("Forecast Portfolio Chart")+
theme_tq()
results$portfolio_plot <- portfolio_plot
results$pred_df_c <- df_c
results$gains <- df_c |>
compute_gains() |>
left_join(investment_df) |>
mutate(return = investment + investment * percentage_change / 100)
results$gains
portfolio_plot
df_c |>
compute_gains()
pred_df_c
results$pred_df_c
df_c
df_c |>
filter(date > lubridate::today())
df_c |>
filter(date >= lubridate::today())
df_c |>
filter(date >= lubridate::today() - lubridate::days(1))
df_c |>
filter(date >= lubridate::today() - lubridate::days(2))
results$gains <- df_c |>
filter(date >= lubridate::today() - lubridate::days(2)) |>
compute_gains() |>
left_join(investment_df) |>
mutate(return = investment + investment * percentage_change / 100)
results$gains
library(richme)
library(richme)
